{
	"metadata": {
		"version": 1
	},
	"application": {
		"name": "buzzworthy_python",
		"language": "PYTHON",
		"artifact_store": {
			"type": "s3",
			"repositories": [
				{
					"category": "rc-packaging",
					"bucket": "guide-rails-calculi-rc"
				},
				{
					"category": "final-packaging",
					"bucket": "guide-rails-calculi-final"
				},
				{
					"category": "logs",
					"bucket": "guide-rails-calculi-logs"
				}
			]
		}
	},
	"pipeline": {
		"segments": [
			{
				"name": "Build",
				"segment_type": "build",
				"job_steps": [
					{
						"name": "Docker",
						"definition": "Docker",
						"command": "# Executing docker commands\ndocker ps\ndocker build .\n",
						"properties": null
					},
					{
						"name": "Install dependencies",
						"definition": "Install dependencies",
						"command": "pip install cython numpy \u003e/dev/null\npip install pytest pytest-cov buzz \u003e/dev/null",
						"properties": null
					},
					{
						"name": "Test",
						"definition": "Test",
						"command": "python -m pytest -v --junit-xml test.xml --cov=. --cov-report xml:coverage.xml\necho 'Done'\n",
						"properties": null
					},
					{
						"name": "Echo Property Value",
						"definition": "Echo Property Value",
						"command": "echo \"test.attribute = ((test.attribute))\"",
						"properties": null
					}
				],
				"exit_actions": {
					"default": {
						"fetch_logs": true,
						"notifications": [
							{
								"type": "slack",
								"send_notification": false,
								"to": null,
								"message": ""
							}
						],
						"code_analysis": {
							"publish": true,
							"properties": null
						},
						"delete_instances": true
					},
					"on_success": {
						"notifications": [
							{
								"type": "slack",
								"send_notification": false,
								"to": null,
								"message": ""
							}
						],
						"code_analysis": null
					},
					"on_failure": {
						"notifications": [
							{
								"type": "slack",
								"send_notification": false,
								"to": null,
								"message": ""
							}
						],
						"code_analysis": null
					},
					"on_abort": {
						"notifications": [
							{
								"type": "slack",
								"send_notification": false,
								"to": null,
								"message": ""
							}
						],
						"code_analysis": null
					}
				},
				"deployment_strategy": {
					"canary_watch_time": "",
					"update_watch_time": "",
					"serial": false
				},
				"application_init": {
					"command": "",
					"arguments": null
				},
				"packages": [
					{
						"name": "((application.name))",
						"dependencies": [],
						"downloads": [],
						"files": [
							"./"
						],
						"package_install_command": "",
						"installed_path": ""
					}
				],
				"instance_tags": [
					{
						"name": "application.name",
						"value": "((application.name))"
					}
				],
				"post_deployment_actions": {
					"instances": null,
					"loadbalanced": false,
					"loadbalancer": {
						"TargetGroupName": "",
						"TargetGroupPort": 0,
						"TargetGroupProtocol": "",
						"TargetType": "",
						"VPCID": "",
						"HealthCheckEnabled": false,
						"HealthCheckPort": "",
						"UnhealthyThresholdCount": 0
					}
				}
			},
			{
				"name": "Isolation",
				"segment_type": "isolation",
				"persistent": true,
				"run_after": [
					"Build"
				],
				"job_steps": [
					{
						"name": "RUN apk",
						"definition": "RUN apk",
						"command": "apk add --update python py-pip",
						"properties": null
					},
					{
						"name": "COPY requirements",
						"definition": "COPY requirements",
						"command": "cp requirements.txt /src/requirements.txt",
						"properties": null
					},
					{
						"name": "RUN pip install",
						"definition": "RUN pip install",
						"command": "pip install -r /src/requirements.txt",
						"properties": null
					},
					{
						"name": "COPY webapp",
						"definition": "COPY webapp",
						"command": "cp webapp.py /src/webapp.py",
						"properties": null
					},
					{
						"name": "COPY buzz",
						"definition": "COPY buzz",
						"command": "cp buzz /src/buzz",
						"properties": null
					},
					{
						"name": "PRINTENV",
						"definition": "PRINTENV",
						"command": "echo \"enviro info...\"\nprintenv | sort\npwd",
						"properties": null
					}
				],
				"exit_actions": {
					"default": {
						"fetch_logs": true,
						"notifications": [
							{
								"type": "slack",
								"send_notification": false,
								"to": null,
								"message": ""
							}
						],
						"code_analysis": {
							"publish": false,
							"properties": null
						},
						"delete_instances": true
					},
					"on_success": {
						"notifications": [
							{
								"type": "slack",
								"send_notification": false,
								"to": null,
								"message": ""
							}
						],
						"code_analysis": {
							"publish": false,
							"properties": null
						}
					},
					"on_failure": {
						"notifications": [
							{
								"type": "slack",
								"send_notification": false,
								"to": null,
								"message": ""
							}
						],
						"code_analysis": {
							"publish": false,
							"properties": null
						}
					},
					"on_abort": {
						"notifications": [
							{
								"type": "slack",
								"send_notification": false,
								"to": null,
								"message": ""
							}
						],
						"code_analysis": {
							"publish": false,
							"properties": null
						}
					}
				},
				"deployment_strategy": {
					"canaries": 1,
					"max_in_flight": 1,
					"canary_watch_time": "5000-30000",
					"update_watch_time": "5000-30000",
					"serial": false
				},
				"application_init": {
					"command": "",
					"arguments": null
				},
				"process": {
					"init": {
						"command": "python /src/webapp.py"
					}
				},
				"package_dependencies": [
					"((application.name))"
				],
				"instance_tags": [
					{
						"name": "application.name",
						"value": "((application.name))"
					}
				],
				"instance_groups": [
					{
						"name": "((application.name))",
						"number_of_instances": 1,
						"persistent_disk_type": "",
						"vm_type": "small",
						"os_type": "default",
						"networks": [
							"((deploy.target.network.isolation))"
						],
						"availability_zones": [
							"((deploy.target.zone.isolation))"
						],
						"deployment_strategy": {},
						"dependencies": [
							{
								"name": "consul",
								"release": "consul",
								"provides": [
									{
										"name": "consul_servers.as",
										"value": "consul_1"
									}
								],
								"consumes": [
									{
										"name": "consul_servers.from",
										"value": "consul_1"
									}
								],
								"properties": [
									{
										"name": "consul.servicename",
										"value": "((consul.servicename))"
									},
									{
										"name": "consul.environment",
										"value": "((consul.environment))"
									},
									{
										"name": "consul.datacenter",
										"value": "((consul.datacenter))"
									},
									{
										"name": "consul.server",
										"value": "false"
									},
									{
										"name": "consul.joinservers",
										"value": "((consul.joinservers))"
									},
									{
										"name": "calculi.intermediate.cert",
										"value": "grsecret:tls.cert"
									},
									{
										"name": "calculi.intermediate.key",
										"value": "grsecret:tls.key"
									}
								]
							}
						]
					}
				],
				"post_deployment_actions": {
					"instances": null,
					"loadbalanced": false,
					"loadbalancer": {
						"TargetGroupName": "",
						"TargetGroupPort": 0,
						"TargetGroupProtocol": "",
						"TargetType": "",
						"VPCID": "",
						"HealthCheckEnabled": false,
						"HealthCheckPort": "",
						"UnhealthyThresholdCount": 0
					}
				}
			}
		],
		"exit_actions": {
			"default": {
				"fetch_logs": true,
				"notifications": [
					{
						"type": "slack",
						"send_notification": false,
						"to": null,
						"message": ""
					}
				],
				"code_analysis": {
					"publish": true,
					"properties": null
				},
				"delete_instances": true
			},
			"on_success": {
				"notifications": [
					{
						"type": "slack",
						"send_notification": false,
						"to": null,
						"message": ""
					}
				],
				"code_analysis": null
			},
			"on_failure": {
				"notifications": [
					{
						"type": "slack",
						"send_notification": false,
						"to": null,
						"message": ""
					}
				],
				"code_analysis": null
			},
			"on_abort": {
				"notifications": [
					{
						"type": "slack",
						"send_notification": false,
						"to": null,
						"message": ""
					}
				],
				"code_analysis": null
			}
		},
		"default_properties": [
			{
				"name": "test.attribute",
				"description": "not really used for anything",
				"value": "foo",
				"type": "string"
			}
		],
		"deployment_files": [],
		"application_init": {
			"command": "",
			"arguments": null
		},
		"process": {
			"init": {
				"command": ""
			}
		},
		"releases": [
			{
				"name": "consul",
				"version": "latest"
			}
		]
	},
	"organization": {
		"orgname": "Tutorial"
	},
	"infrastructure": {
		"stemcells": [
			{
				"alias": "default",
				"os": "ubuntu-trusty",
				"version": "latest"
			}
		],
		"resources": [
			{
				"name": "pipeline",
				"image": {
					"name": "docker-registry.service.consul:443/pipeline-image-repiper-test",
					"version": "latest",
					"location": "docker-registry.service.consul:443"
				}
			},
			{
				"name": "email",
				"image": {
					"name": "docker-registry.service.consul:443/gr-email-resource",
					"version": "latest",
					"location": "docker-registry.service.consul:443"
				}
			},
			{
				"name": "deployment",
				"image": {
					"name": "docker-registry.service.consul:443/pipeline-image-bosh-test",
					"version": "latest",
					"location": "docker-registry.service.consul:443"
				}
			},
			{
				"name": "idgenerator",
				"image": {
					"name": "docker-registry.service.consul:443/gr-id-generator",
					"version": "latest",
					"location": "docker-registry.service.consul:443"
				}
			},
			{
				"name": "emitter",
				"image": {
					"name": "docker-registry.service.consul:443/guide-rails-emitter",
					"version": "latest",
					"location": "docker-registry.service.consul:443"
				}
			},
			{
				"name": "git-resource",
				"image": {
					"name": "docker-registry.service.consul:443/gr-git-resource",
					"version": "latest",
					"location": "docker-registry.service.consul:443"
				}
			},
			{
				"name": "build-breaker",
				"image": {
					"name": "docker-registry.service.consul:443/gr-build-breaker",
					"version": "latest",
					"location": "docker-registry.service.consul:443"
				}
			},
			{
				"name": "s3",
				"image": {
					"name": "docker-registry.service.consul:443/concourse-s3-resource",
					"version": "latest",
					"location": "docker-registry.service.consul:443"
				}
			},
			{
				"name": "slack",
				"image": {
					"name": "docker-registry.service.consul:443/concourse-slack-resource",
					"version": "latest",
					"location": "docker-registry.service.consul:443"
				}
			},
			{
				"name": "sonar",
				"image": {
					"name": "docker-registry.service.consul:443/concourse-sonarqube-resource",
					"version": "latest",
					"location": "docker-registry.service.consul:443"
				}
			},
			{
				"name": "time",
				"image": {
					"name": "docker-registry.service.consul:443/gr-time-resource",
					"version": "latest",
					"location": "docker-registry.service.consul:443"
				}
			},
			{
				"name": "azure-blobstore",
				"image": {
					"name": "docker-registry.service.consul:443/concourse-azure-blobstore-resource",
					"version": "latest",
					"location": "docker-registry.service.consul:443"
				}
			},
			{
				"name": "gr-gcs-resource",
				"image": {
					"name": "docker-registry.service.consul:443/gr-gcs-resource",
					"version": "latest",
					"location": "docker-registry.service.consul:443"
				}
			},
			{
				"name": "build",
				"image": {
					"name": "docker-registry.service.consul:443/pipeline-image-python-tools",
					"version": "latest",
					"location": "docker-registry.service.consul:443"
				}
			}
		],
		"notification_configurations": [
			{
				"name": "email",
				"provider": "email",
				"URL": "",
				"properties": [
					{
						"name": "gr_email_host",
						"value": "((gr_email_host))"
					},
					{
						"name": "gr_email_port",
						"value": "((gr_email_port))"
					},
					{
						"name": "gr_email_from",
						"value": "((gr_email_from))"
					},
					{
						"name": "gr_email_username",
						"value": "((gr_email_username))"
					},
					{
						"name": "gr_email_password",
						"value": "((gr_email_password))"
					}
				]
			}
		],
		"vault": {
			"address": ""
		},
		"concourse": {
			"address": "",
			"team": "",
			"username": "",
			"password": "",
			"fly_target_path": ""
		},
		"mq": {
			"host": "",
			"user": "",
			"password": ""
		},
		"bosh": {
			"director": ""
		}
	}
}